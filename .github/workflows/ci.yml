name: CI
# See https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main 
jobs:
  clippy_check:
    name: Run clippy check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true
      - name: Install trunk
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --locked --debug trunk
      - name: Install webassembly rust target
        run: rustup target add wasm32-unknown-unknown

      # Required for tailwindcss
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install node packages
        working-directory: ./web_frontend
        run: npm i

      # We need to build the web frontend otherwise, we will not be able to compile
      # the server and checks will fail.
      - name: Build web frontend
        run: trunk build
        working-directory: ./web_frontend
      - name: Build backend
        run: cargo build
        working-directory: .


  rustfmt:
    name: Check style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          profile: minimal
          override: true

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  image:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install docker
        uses: docker/setup-buildx-action@v2
      - name: 'Auth to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Build and push image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 --push -t privaxy/privaxy:latest .
          docker push ghcr.io/joshrmcdaniel/privaxy:latest
  ci:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          key:  ${{ matrix.os }}-${{ matrix.target }}-artifacts
          path: |
            ./target
            ~/.cargo

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}
      - name: Install cross build dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install node packages
        working-directory: ./web_frontend
        run: npm i
      - name: Install trunk
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --locked --debug trunk
      - name: Build web frontend
        run: rustup target add wasm32-unknown-unknown && trunk build --release
        working-directory: ./web_frontend
      - name: Build server
        uses: actions-rs/cargo@v1
        with:
          command: build
          working-directory: .
          args: --release --target ${{ matrix.target }} --bin privaxy --target-dir target
      - name: Build deb
        run: cargo install cargo-deb && cargo deb -p privaxy --target ${{ matrix.target }} -o target/${{ matrix.target }}/release
      - uses: actions/upload-artifact@v4
        with:
          name: privaxy-deb-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/privaxy_*.deb
      - uses: actions/upload-artifact@v4
        with:
          name: privaxy-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/privaxy
